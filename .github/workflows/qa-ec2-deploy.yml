name: CI/CD Workflow WEB QA

on:
    push:
        branches:
            - main

jobs:
    build_and_push_image:
        name: Build and push image
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4.2.2

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4.1.0
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Fetch Parameter Store values and create .env
              run: |
                  [ -f .env ] && rm .env

                  echo WEB_NODE_ENV=$(aws ssm get-parameter --name /qa/kodus-web/WEB_NODE_ENV --query 'Parameter.Value' --output text) >> .env

                  echo WEB_HOSTNAME_API=$(aws ssm get-parameter --name /qa/kodus-web/WEB_HOSTNAME_API --query 'Parameter.Value' --output text) >> .env

                  echo WEB_HOSTNAME_BILLING=$(aws ssm get-parameter --name /qa/kodus-web/WEB_HOSTNAME_BILLING --query 'Parameter.Value' --output text) >> .env

                  echo WEB_NEXTAUTH_SECRET=$(aws ssm get-parameter --name /qa/kodus-web/WEB_NEXTAUTH_SECRET --query 'Parameter.Value' --output text) >> .env
                  echo NEXTAUTH_URL=$(aws ssm get-parameter --name /qa/kodus-web/NEXTAUTH_URL --query 'Parameter.Value' --output text) >> .env

                  echo WEB_CONNECTION_SLACK=$(aws ssm get-parameter --name /qa/kodus-web/WEB_CONNECTION_SLACK --query 'Parameter.Value' --output text) >> .env

                  echo GLOBAL_JIRA_CLIENT_ID=$(aws ssm get-parameter --name /qa/kodus-web/GLOBAL_JIRA_CLIENT_ID --query 'Parameter.Value' --output text) >> .env
                  echo GLOBAL_JIRA_REDIRECT_URL=$(aws ssm get-parameter --name /qa/kodus-web/GLOBAL_JIRA_REDIRECT_URL --query 'Parameter.Value' --output text) >> .env
                  echo WEB_JIRA_SCOPES=$(aws ssm get-parameter --name /qa/kodus-web/WEB_JIRA_SCOPES --query 'Parameter.Value' --output text) >> .env

                  echo WEB_GITHUB_INSTALL_URL=$(aws ssm get-parameter --name /qa/kodus-web/WEB_GITHUB_INSTALL_URL --query 'Parameter.Value' --output text) >> .env
                  echo GITHUB_CLIENT_SECRET=$(aws ssm get-parameter --name /qa/kodus-web/GITHUB_CLIENT_SECRET --query 'Parameter.Value' --output text) >> .env

                  echo GLOBAL_GITLAB_CLIENT_ID=$(aws ssm get-parameter --name /qa/kodus-web/GLOBAL_GITLAB_CLIENT_ID --query 'Parameter.Value' --output text) >> .env
                  echo GLOBAL_GITLAB_REDIRECT_URL=$(aws ssm get-parameter --name /qa/kodus-web/GLOBAL_GITLAB_REDIRECT_URL --query 'Parameter.Value' --output text) >> .env
                  echo WEB_GITLAB_SCOPES=$(aws ssm get-parameter --name /qa/kodus-web/WEB_GITLAB_SCOPES --query 'Parameter.Value' --output text) >> .env
                  echo WEB_GITLAB_OAUTH_URL=$(aws ssm get-parameter --name /qa/kodus-web/WEB_GITLAB_OAUTH_URL --query 'Parameter.Value' --output text) >> .env

                  echo WEB_TERMS_AND_CONDITIONS=$(aws ssm get-parameter --name /qa/kodus-web/WEB_TERMS_AND_CONDITIONS --query 'Parameter.Value' --output text) >> .env

                  echo GLOBAL_SLACK_HOSTNAME=$(aws ssm get-parameter --name /qa/kodus-web/GLOBAL_SLACK_HOSTNAME --query 'Parameter.Value' --output text) >> .env
                  echo WEB_CONNECTION_DISCORD=$(aws ssm get-parameter --name /qa/kodus-web/WEB_CONNECTION_DISCORD --query 'Parameter.Value' --output text) >> .env
                  echo GLOBAL_DISCORD_HOSTNAME=$(aws ssm get-parameter --name /qa/kodus-web/GLOBAL_DISCORD_HOSTNAME --query 'Parameter.Value' --output text) >> .env
                  echo AZURE_REPOS_HOSTNAME=$(aws ssm get-parameter --name /qa/kodus-web/AZURE_REPOS_HOSTNAME --query 'Parameter.Value' --output text) >> .env

                  echo WEB_OAUTH_GITLAB_CLIENT_ID=$(aws ssm get-parameter --name /qa/kodus-web/WEB_OAUTH_GITLAB_CLIENT_ID --query 'Parameter.Value' --output text) >> .env
                  echo WEB_OAUTH_GITLAB_CLIENT_SECRET=$(aws ssm get-parameter --name /qa/kodus-web/WEB_OAUTH_GITLAB_CLIENT_SECRET --query 'Parameter.Value' --output text) >> .env

                  echo WEB_OAUTH_GITHUB_CLIENT_ID=$(aws ssm get-parameter --name /qa/kodus-web/WEB_OAUTH_GITHUB_CLIENT_ID --query 'Parameter.Value' --output text) >> .env
                  echo WEB_OAUTH_GITHUB_CLIENT_SECRET=$(aws ssm get-parameter --name /qa/kodus-web/WEB_OAUTH_GITHUB_CLIENT_SECRET --query 'Parameter.Value' --output text) >> .env

                  echo WEB_ANALYTICS_HOSTNAME=$(aws ssm get-parameter --name /qa/kodus-web/WEB_ANALYTICS_HOSTNAME --query 'Parameter.Value' --output text) >> .env
                  echo WEB_ANALYTICS_SECRET=$(aws ssm get-parameter --name /qa/kodus-web/WEB_ANALYTICS_SECRET --query 'Parameter.Value' --output text) >> .env

                  echo WEB_SUPPORT_DOCS_URL=$(aws ssm get-parameter --name /qa/kodus-web/WEB_SUPPORT_DOCS_URL --query 'Parameter.Value' --output text) >> .env
                  echo WEB_SUPPORT_DISCORD_INVITE_URL=$(aws ssm get-parameter --name /qa/kodus-web/WEB_SUPPORT_DISCORD_INVITE_URL --query 'Parameter.Value' --output text) >> .env
                  echo WEB_SUPPORT_TALK_TO_FOUNDER_URL=$(aws ssm get-parameter --name /qa/kodus-web/WEB_SUPPORT_TALK_TO_FOUNDER_URL --query 'Parameter.Value' --output text) >> .env

                  echo WEB_TOKEN_DOCS_GITHUB=$(aws ssm get-parameter --name /qa/kodus-web/WEB_TOKEN_DOCS_GITHUB --query 'Parameter.Value' --output text) >> .env
                  echo WEB_TOKEN_DOCS_GITLAB=$(aws ssm get-parameter --name /qa/kodus-web/WEB_TOKEN_DOCS_GITLAB --query 'Parameter.Value' --output text) >> .env
                  echo WEB_TOKEN_DOCS_BITBUCKET=$(aws ssm get-parameter --name /qa/kodus-web/WEB_TOKEN_DOCS_BITBUCKET --query 'Parameter.Value' --output text) >> .env
                  echo WEB_TOKEN_DOCS_AZUREREPOS=$(aws ssm get-parameter --name /qa/kodus-web/WEB_TOKEN_DOCS_AZUREREPOS --query 'Parameter.Value' --output text) >> .env

                  echo WEB_POSTHOG_KEY=$(aws ssm get-parameter --name /qa/kodus-web/WEB_POSTHOG_KEY --query 'Parameter.Value' --output text) >> .env

                  echo WEB_HOSTNAME_MCP_MANAGER=$(aws ssm get-parameter --name /qa/kodus-web/WEB_HOSTNAME_MCP_MANAGER --query 'Parameter.Value' --output text) >> .env
                  echo WEB_RULE_FILES_DOCS=$(aws ssm get-parameter --name /qa/kodus-web/WEB_RULE_FILES_DOCS --query 'Parameter.Value' --output text) >> .env

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2.0.1

            - name: Build, tag, and push image to Amazon ECR
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: kodus-web-qa
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build -f Dockerfiles/Dockerfile.qa -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            - name: Log out of Amazon ECR
              if: always()
              run: docker logout ${{ steps.login-ecr.outputs.registry }}

    deploy_in_server:
        name: Deploy in server
        runs-on: ubuntu-latest
        needs: build_and_push_image
        steps:
            - name: Get runner IP and mask it
              id: get_ip
              run: |
                  ip=$(curl -s https://ipinfo.io/ip)
                  echo "::add-mask::$ip"
                  echo "runner_ip=$ip" >> $GITHUB_ENV

            - name: Add Github Actions IP to Security Group
              run: |
                  aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP }} --protocol tcp --port 22 --cidr "${{ env.runner_ip }}/32" > /dev/null 2>&1
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

            - name: Execute start-web-app.sh on EC2
              uses: appleboy/ssh-action@v1.2.2
              with:
                  host: ${{ secrets.AWS_QA_HOST }}
                  username: ${{ secrets.AWS_QA_USERNAME }}
                  key: ${{ secrets.AWS_QA_KEY_SSH }}
                  script: |
                      cd ~/kodus-web
                      ./start-web-app.sh qa ${{ github.sha }} ${{ github.ref }}

            - name: Remove Github Actions IP from Security Group
              run: |
                  aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP }} --protocol tcp --port 22 --cidr ${{ env.runner_ip }}/32 > /dev/null 2>&1
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
              if: always()

            - name: Discord Notification
              uses: sarisia/actions-status-discord@v1.15.3
              with:
                  webhook: ${{ secrets.DISCORD_WEBHOOK }}
                  status: ${{ job.status }}
                  content: ":clap: Build successful!"
                  title: "Deploy QA: kodus-web"
                  username: GitHub Actions
